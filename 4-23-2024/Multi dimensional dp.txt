**** MULTI DIMENSIONAL DP

1. Triangle 


Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11.

class Solution:
    def Triangles(self, dp: List[List[int]], i: int, j: int, total: int,li:[]) -> int:
        if len(dp)-1 == i: // base case if it reaches the end then return the last element 
            return dp[i][j]
			
        if li[i][j]!=-1:
            return li[i][j]
        
		// Check for the minimum in the i or i+1 in the next row then add it with the current value 
		
        li[i][j] = dp[i][j]+min(self.Triangles(dp, i+1, j, total,li), self.Triangles(dp, i+1, j+1, total,li)) 
        return li[i][j]

    def minimumTotal(self, triangle: List[List[int]]) -> int:
        dp = [[-1 for _ in range(len(triangle[j]))] for j in range(len(triangle))]]
        return self.Triangles(triangle, 0, 0, 0,dp)
		
		

2. Minimum Path Sum 


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        le = len(grid)
        row,col = len(grid),len(grid[0])
        dic = {}

        def solve(grid,i,j):
            s=i,'',j
            if (i==row-1) and (j==col-1):
                return grid[i][j]
            if i>=row or j>=col:
                return float('inf')
            if s in dic:
                return dic[s]
            ans =  grid[i][j]+min(solve(grid,i+1,j), solve(grid,i,j+1))
            dic[s] = ans
            return ans
        return solve(grid,0,0)



3. Unique Paths ||


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
 
 class Solution:
    def uniquePathsWithObstacles(self, grid: List[List[int]]) -> int:
        m,n=len(grid),len(grid[0])
        memo = {}
        def solve(grid,i,j):
            s=i,'',j
            if i == m-1 and j==n-1:
                print("Reached")
                return 1 if grid[i][j]!=1 else 0
            if i>=m or j>=n or grid[i][j]==1:
                return 0
            if s in memo:
                return memo[s]
            ans = solve(grid,i+1,j) + solve(grid,i,j+1)
            memo[s] = ans 
            return ans
        return solve(grid,0,0)
